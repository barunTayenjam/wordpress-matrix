#!/bin/bash
# WordPress Development Platform Management Script

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Show help
show_help() {
    cat << EOF
üöÄ WordPress Development Platform Management

Usage: ./wp-dev <command> [options]

Commands:
  setup         Initial setup of the development environment
  start         Start all services
  stop          Stop all services
  restart       Restart all services
  status        Show status of all services
  logs          Show logs (use -f to follow)
  shell         Access container shell
  backup        Create backup
  restore       Restore from backup
  update        Update all containers
  clean         Clean up unused resources
  monitor       Open monitoring dashboard
  instances     Manage WordPress instances
  help          Show this help message

Instance Management:
  instances create <name> [version]  Create new WordPress instance
  instances remove <name>            Remove WordPress instance
  instances list                     List all instances
  instances status                   Show instance status

Examples:
  ./wp-dev setup                    # Initial setup
  ./wp-dev start                    # Start environment
  ./wp-dev logs -f wordpress1       # Follow WordPress 1 logs
  ./wp-dev shell wpcli              # Access WP-CLI container
  ./wp-dev backup wordpress1        # Backup WordPress 1
  ./wp-dev instances create blog 6.3 # Create new blog instance
  ./wp-dev instances list           # List all instances
  ./wp-dev clean                    # Clean up resources

Documentation:
  docs/USAGE_GUIDE.md              # Complete usage guide
  docs/WORDPRESS_INSTANCES.md      # Instance management guide
  docs/QUICK_REFERENCE.md          # Quick reference
  docs/ARCHITECTURE.md             # Architecture overview

For more information, visit: https://github.com/your-repo/wp-dev-platform
EOF
}

# Setup command
cmd_setup() {
    log_info "Setting up WordPress Development Environment..."
    ./scripts/dev/setup.sh
}

# Start command
cmd_start() {
    log_info "Starting WordPress Development Environment..."
    ./scripts/dev/start.sh
}

# Stop command
cmd_stop() {
    log_info "Stopping WordPress Development Environment..."
    ./scripts/dev/stop.sh
}

# Restart command
cmd_restart() {
    local service=${1:-}
    if [ -n "$service" ]; then
        log_info "Restarting service: $service"
        docker-compose restart "$service"
    else
        log_info "Restarting all services..."
        docker-compose restart
    fi
}

# Status command
cmd_status() {
    log_info "Service Status:"
    docker-compose ps
    echo ""
    log_info "Resource Usage:"
    docker stats --no-stream
}

# Logs command
cmd_logs() {
    local follow=""
    local service=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--follow)
                follow="-f"
                shift
                ;;
            *)
                service="$1"
                shift
                ;;
        esac
    done
    
    if [ -n "$service" ]; then
        docker-compose logs $follow "$service"
    else
        docker-compose logs $follow
    fi
}

# Shell command
cmd_shell() {
    local service=${1:-wpcli}
    local shell=${2:-bash}
    
    log_info "Accessing $service container..."
    docker-compose exec "$service" "$shell"
}

# Backup command
cmd_backup() {
    local site=${1:-}
    
    if [ -n "$site" ]; then
        log_info "Creating backup for $site..."
        docker-compose exec wpcli wp-backup "$site"
    else
        log_info "Creating backup for all sites..."
        docker-compose exec wpcli wp-backup
    fi
}

# Restore command
cmd_restore() {
    local site=${1:-}
    local backup=${2:-}
    
    if [ -z "$site" ]; then
        log_error "Please specify a site to restore"
        echo "Usage: ./wp-dev restore <site> [backup_timestamp]"
        echo "       ./wp-dev restore <site> list"
        exit 1
    fi
    
    if [ -n "$backup" ]; then
        docker-compose exec wpcli wp-restore "$site" "$backup"
    else
        docker-compose exec wpcli wp-restore "$site" list
    fi
}

# Update command
cmd_update() {
    log_info "Updating all containers..."
    docker-compose pull
    docker-compose build --pull
    log_success "Update completed"
}

# Clean command
cmd_clean() {
    log_warning "This will remove unused Docker resources"
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Cleaning up Docker resources..."
        docker system prune -f
        docker volume prune -f
        log_success "Cleanup completed"
    fi
}

# Monitor command
cmd_monitor() {
    log_info "Opening monitoring dashboard..."
    if command -v open > /dev/null; then
        open "https://grafana.127.0.0.1.nip.io"
    elif command -v xdg-open > /dev/null; then
        xdg-open "https://grafana.127.0.0.1.nip.io"
    else
        log_info "Please open: https://grafana.127.0.0.1.nip.io"
    fi
}

# Instances command
cmd_instances() {
    if [ $# -eq 0 ]; then
        log_error "Instance command required"
        echo ""
        echo "Available commands:"
        echo "  create <name> [version]  Create new WordPress instance"
        echo "  remove <name>            Remove WordPress instance"
        echo "  list                     List all instances"
        echo "  status                   Show instance status"
        exit 1
    fi
    
    ./scripts/manage-instances.sh "$@"
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    local command=$1
    shift
    
    case $command in
        setup)
            cmd_setup "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        shell)
            cmd_shell "$@"
            ;;
        backup)
            cmd_backup "$@"
            ;;
        restore)
            cmd_restore "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        clean)
            cmd_clean "$@"
            ;;
        monitor)
            cmd_monitor "$@"
            ;;
        instances)
            cmd_instances "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"